using App.AutoGenerated;
using Axon_Job_App.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using Axon_Job_App.Services;


var builder = WebApplication.CreateBuilder(args);

builder.useCai();

// Configuration
var configuration = builder.Configuration;
var connString = configuration.GetConnectionString("DevDB");

// Database Context - register first without scoped registration
builder.Services.AddDbContext<DataContext>(options => 
    options.UseSqlite(connString));

builder.Services.AddControllers();

//Cors
builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(policy =>
    {
        policy.AllowAnyOrigin()
              .AllowAnyMethod()
              .AllowAnyHeader();
    });
});

// Add authentication
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        var key = Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"] ?? string.Empty);
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(key)
        };
    });

// Add authorization
builder.Services.AddAuthorization();

// Register services
builder.Services.AddSingleton<JwtService>();
builder.Services.AddHttpContextAccessor();
builder.Services.AddScoped<AuthContext>();


var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}

app.UseAuthentication();
app.UseAuthorization();


app.UseHttpsRedirection();

app.UseCors();

app.MigrateDb();

app.MapControllers();

app.mapCai(); 

app.Run();

